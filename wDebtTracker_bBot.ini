import os
import sqlite3
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import pycountry
import requests
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = os.getenv('8120127011:AAH7-NPLVH5_jW6CEMRkJXhAn1FXhr1yR24KEN')
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MergeDebts(StatesGroup):
    waiting_for_comment = State()
    waiting_for_confirm = State()

class AddDebt(StatesGroup):
    waiting_for_currency = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def init_db():
    conn = sqlite3.connect('debts.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–≥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS debts (
        id INTEGER PRIMARY KEY,
        creditor_id INTEGER,
        debtor_name TEXT,
        debtor_username TEXT,
        amount REAL,
        currency TEXT,
        category TEXT,
        created_at TEXT,
        is_paid BOOLEAN DEFAULT 0
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS merged_debts (
        id INTEGER PRIMARY KEY,
        creditor_id INTEGER,
        debtor_name TEXT,
        debtor_username TEXT,
        total_amount REAL,
        currency TEXT,
        comment TEXT,
        created_at TEXT,
        original_debts TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS debt_history (
        id INTEGER PRIMARY KEY,
        debt_id INTEGER,
        action TEXT,
        amount REAL,
        currency TEXT,
        comment TEXT,
        created_at TEXT,
        FOREIGN KEY (debt_id) REFERENCES debts(id)
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
def is_valid_currency(currency_code):
    try:
        return pycountry.currencies.get(alpha_3=currency_code) is not None
    except:
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_exchange_rate(from_currency, to_currency):
    API_URL = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"
    try:
        response = requests.get(API_URL)
        data = response.json()
        return data['rates'][to_currency]
    except:
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ–ª–≥–æ–≤\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_debt - –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥\n"
        "/debts - –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤\n"
        "/return - –í–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥\n"
        "/merge_debts - –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–æ–ª–≥–∏\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/export_excel - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel\n"
        "/export_pdf - –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"
    )

# –ö–æ–º–∞–Ω–¥–∞ /add_debt
@dp.message_handler(commands=['add_debt'])
async def cmd_add_debt(message: types.Message):
    args = message.get_args().split()
    if len(args) < 3:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/add_debt [–∏–º—è/@—é–∑–µ—Ä–Ω–µ–π–º] [—Å—É–º–º–∞] [–≤–∞–ª—é—Ç–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]\n"
            "–ü—Ä–∏–º–µ—Ä: /add_debt –ò–≤–∞–Ω 1000 RUB –ü—Ä–æ–¥—É–∫—Ç—ã"
        )
        return
    
    debtor_input = args[0]
    try:
        amount = float(args[1])
    except ValueError:
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    currency = args[2].upper()
    if len(args) >= 4:
        category = ' '.join(args[3:])
    else:
        category = "–î—Ä—É–≥–æ–µ"
    
    if not is_valid_currency(currency):
        await message.reply(f"‚ùå –í–∞–ª—é—Ç–∞ '{currency}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ª–≥ –≤ –ë–î
    conn = sqlite3.connect('debts.db')
    cursor = conn.cursor()
    
    debtor_username = debtor_input if debtor_input.startswith('@') else None
    debtor_name = debtor_input.replace('@', '')
    
    cursor.execute('''
    INSERT INTO debts 
    (creditor_id, debtor_name, debtor_username, amount, currency, category, created_at)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        debtor_name,
        debtor_username,
        amount,
        currency,
        category,
        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    ))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    debt_id = cursor.lastrowid
    cursor.execute('''
    INSERT INTO debt_history 
    (debt_id, action, amount, currency, comment, created_at)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (
        debt_id,
        'create',
        amount,
        currency,
        f"–°–æ–∑–¥–∞–Ω –¥–æ–ª–≥: {category}",
        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    ))
    
    conn.commit()
    conn.close()
    
    await message.reply(
        f"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
        f"‚Ä¢ –ö—Ç–æ –¥–æ–ª–∂–µ–Ω: {debtor_name}\n"
        f"‚Ä¢ –°—É–º–º–∞: {amount} {currency}\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
    )

# –ö–æ–º–∞–Ω–¥–∞ /debts
@dp.message_handler(commands=['debts'])
async def cmd_debts(message: types.Message):
    conn = sqlite3.connect('debts.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT debtor_name, SUM(amount), currency 
    FROM debts 
    WHERE creditor_id = ? AND is_paid = 0
    GROUP BY debtor_name, currency
    ''', (message.from_user.id,))
    
    debts = cursor.fetchall()
    conn.close()
    
    if not debts:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")
        return
    
    response = "üìã –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
    for debt in debts:
        response += f"‚Ä¢ {debt[0]} - {debt[1]} {debt[2]}\n"
    
    await message.reply(response)

# –ö–æ–º–∞–Ω–¥–∞ /return
@dp.message_handler(commands=['return'])
async def cmd_return(message: types.Message):
    args = message.get_args().split()
    if len(args) < 3:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/return [–∏–º—è/@—é–∑–µ—Ä–Ω–µ–π–º] [—Å—É–º–º–∞] [–≤–∞–ª—é—Ç–∞]\n"
            "–ü—Ä–∏–º–µ—Ä: /return –ò–≤–∞–Ω 500 RUB"
        )
        return
    
    debtor_input = args[0]
    try:
        amount = float(args[1])
    except ValueError:
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    currency = args[2].upper()
    
    conn = sqlite3.connect('debts.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT id, amount 
    FROM debts 
    WHERE creditor_id = ? 
    AND (debtor_name = ? OR debtor_username = ?)
    AND currency = ?
    AND is_paid = 0
    ORDER BY created_at
    ''', (message.from_user.id, debtor_input, debtor_input, currency))
    
    debt = cursor.fetchone()
    
    if not debt:
        await message.reply("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    debt_id, debt_amount = debt
    new_amount = debt_amount - amount
    
    if new_amount <= 0:
        cursor.execute('UPDATE debts SET is_paid = 1 WHERE id = ?', (debt_id,))
        comment = "–î–æ–ª–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω"
    else:
        cursor.execute('UPDATE debts SET amount = ? WHERE id = ?', (new_amount, debt_id))
        comment = f"–ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ. –û—Å—Ç–∞—Ç–æ–∫: {new_amount} {currency}"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    cursor.execute('''
    INSERT INTO debt_history 
    (debt_id, action, amount, currency, comment, created_at)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (
        debt_id,
        'return',
        amount,
        currency,
        comment,
        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    ))
    
    conn.commit()
    conn.close()
    
    await message.reply(f"‚úÖ {comment}")

# –ö–æ–º–∞–Ω–¥–∞ /merge_debts
@dp.message_handler(commands=['merge_debts'])
async def cmd_merge_debts(message: types.Message, state: FSMContext):
    args = message.get_args().split()
    if not args:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è: /merge_debts –ò–≤–∞–Ω")
        return
    
    debtor_input = args[0]
    conn = sqlite3.connect('debts.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT id, amount, currency, category, created_at 
    FROM debts 
    WHERE creditor_id = ? 
    AND (debtor_name = ? OR debtor_username = ?)
    AND is_paid = 0
    ''', (message.from_user.id, debtor_input, debtor_input))
    
    debts = cursor.fetchall()
    conn.close()
    
    if not debts:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç
    currencies = {debt[2] for debt in debts}
    if len(currencies) > 1:
        await message.reply(
            f"‚ùå –í–∞–ª—é—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {', '.join(currencies)}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /convert —Å–Ω–∞—á–∞–ª–∞."
        )
        return
    
    await state.update_data({
        'debtor_input': debtor_input,
        'debts': debts,
        'currency': debts[0][2]
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤
    debts_list = "\n".join(
        f"{i+1}. {debt[1]} {debt[2]} - {debt[3]} ({debt[4][:10]})"
        for i, debt in enumerate(debts)
    )
    total = sum(debt[1] for debt in debts)
    
    # –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
    
    await message.reply(
        f"üìã –ù–∞–π–¥–µ–Ω—ã –¥–æ–ª–≥–∏ {debtor_input}:\n{debts_list}\n\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: {total} {debts[0][2]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await MergeDebts.waiting_for_comment.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
@dp.message_handler(state=MergeDebts.waiting_for_comment)
async def process_merge_comment(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.reply("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        return
    
    data = await state.get_data()
    debts = data['debts']
    total = sum(debt[1] for debt in debts)
    
    await state.update_data({
        'comment': message.text,
        'total': total
    })
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_merge"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_merge")
    )
    
    await message.reply(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ:\n"
        f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {data['debtor_input']}\n"
        f"‚Ä¢ –°—É–º–º–∞: {total} {data['currency']}\n"
        f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}",
        reply_markup=keyboard,
        reply_markup=ReplyKeyboardRemove()
    )
    await MergeDebts.waiting_for_confirm.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data in ['confirm_merge', 'cancel_merge'], state=MergeDebts.waiting_for_confirm)
async def process_merge_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'cancel_merge':
        await callback_query.message.edit_text("‚ùå –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
        return
    
    data = await state.get_data()
    debts = data['debts']
    total = data['total']
    currency = data['currency']
    comment = data['comment']
    debtor_input = data['debtor_input']
    
    conn = sqlite3.connect('debts.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–æ–ª–≥
    cursor.execute('''
    INSERT INTO merged_debts 
    (creditor_id, debtor_name, total_amount, currency, comment, created_at, original_debts)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        callback_query.from_user.id,
        debtor_input,
        total,
        currency,
        comment,
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        json.dumps([{'id': debt[0], 'amount': debt[1]} for debt in debts])
    ))
    
    merged_id = cursor.lastrowid
    
    # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–ª–≥–∏ –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ
    for debt in debts:
        cursor.execute('UPDATE debts SET is_paid = 1 WHERE id = ?', (debt[0],))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        cursor.execute('''
        INSERT INTO debt_history 
        (debt_id, action, amount, currency, comment, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            debt[0],
            'merge',
            debt[1],
            currency,
            f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≤ –¥–æ–ª–≥ #{merged_id}",
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
    
    conn.commit()
    conn.close()
    
    await callback_query.message.edit_text(
        f"‚úÖ –î–æ–ª–≥–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total} {currency}\n"
        f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)